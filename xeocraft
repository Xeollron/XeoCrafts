#!/bin/bash
# /etc/init.d/minecraft

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

# Settings start
USERNAME=$(whoami)

SERVICE='forge_latest.jar'																				#either change to server jar name or rename server jar to this
MCSTORE="/home/$USERNAME/Documents/minecraft/xeocraft1" 					#storage location of server files
MCPATH="/home/$USERNAME/Documents/minecraft/xeocraft1_ramdisk"		#running ramdisk mount point
BACKUPPATH="/home/$USERNAME/Documents/minecraft/backups"					#directory for backups to be stored
OFFBACKUPPATH="/mnt/backups/$PORT/"																#off site/external/seperate drive storage path
CHECKSERVER="/home/$USERNAME/Documents/minecraft/CheckServer"			#to be depricated?
CRASHLOG_DB_PATH='/home/$USERNAME/Documents/minecraft/crashlogs'	#crashlog path
JAVA_HOME="/usr/lib/jvm/java-8-oracle"														#java path

MEMORY_OPTS="-Xmx6G -Xms6G" #Edit for Memory Allocation
DISKSIZE="3072" #ramdisk size in MegaBytes
# Java JVM options/config, not sure how required
JAVA_OPTIONS="-d64 -server -XX:+UseG1GC -DJINTEGRA_NATIVE_MODE -DJINTEGRA_COINIT_VALUE=0 -Dsun.io.useCanonCaches=false -Djline.terminal=jline.UnsupportedTerminal -XX:ThreadPriorityPolicy=42 -XX:CompileThreshold=1500 -XX:+TieredCompilation -XX:ParallelGCThreads=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=15 -XX:+UnlockExperimentalVMOptions -XX:+UseAdaptiveGCBoundary -XX:+UseGCOverheadLimit -XX:+UseBiasedLocking -Xnoclassgc -Xverify:none -XX:UseSSE=4 -XX:+UseThreadPriorities -Djava.net.preferIPv4Stack=true -XX:+UseLargePages -XX:+OptimizeStringConcat -XX:+UseFastAccessorMethods -Xrs -XX:+UseCompressedOops -XX:+AggressiveOpts -Dfml.queryResult=confirm"

INVOCATION="${JAVA_HOME}/bin/java ${MEMORY_OPTS} ${JAVA_OPTIONS} -jar $SERVICE nogui" #jvm mc server compilation
BACKUPARCHIVEPATH=$BACKUPPATH/archive
BACKUPDIR="$PORT:$(date).tar.gz"	#naming scheme for backup files
PORT=$(grep server-port $MCSTORE/server.properties | cut -d '=' -f 2) #pull port from server.properties file
WORLD=$(grep level-name $MCSTORE/server.properties | cut -d '=' -f 2)	#pull world name from server.properties file

#need to figure out something to remind for users

if [ -z "$PORT" ]; then #if no port set, sets to defaults
	PORT=25565
fi

# End of Settings

if [ $(whoami) != $USERNAME ]; then
	su $USERNAME -l -c "$(readlink -f $0) $*"
	exit $?
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#			Server Operation Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ramdsk_mount() { #mount ramdisk
	if mountpoint -q $MCPATH; then #check if ramdisk is already mounted
		echo "$SERVICE ramdisk is mounted"
	else
		echo "Need to mount $SERVICE, requires root/su privledges to mount"
		sudo mount -t tmpfs none $MCPATH -o size="$DISKSIZE"M #mount ramdisk
		if mountpoint -q $MCPATH; then #check if mount succeded
			echo "$SERVICE ramdisk is mounted"
		else
			echo 1>&2 "$SERVICE ramdisk failed to mount, exiting." #exit if ramdisk failed to mount
			exit 2
		fi
	fi
}

is_running() { #check if the server is running
	if [ ! -e $MCPATH/java.pid ]; then
		return 1
	fi

	pid=$(cat $MCPATH/java.pid)
	if [ -z $pid ]; then
		return 1
	fi

	ps -eo "%p" | grep "^\\s*$pid\\s*\$" > /dev/null
	return $?
}

mc_start() { #start the server
	if is_running; then
		echo "Tried to start but $SERVICE was already running!"
	else
		echo "$SERVICE was not running... starting."
		ramdsk_mount
		cd $MCPATH #check if the server is in the ramdisk
		if [ ! -f "$MCPATH/$SERVICE" ]; then #move server to ramdisk if empty
      echo "Ram drive empty...  prepping."
      cp -R $MCSTORE/* $MCPATH/
    fi

		tmux new-session -s "mc$PORT" -d "$INVOCATION"

		for (( i=0; i < 10; i++ )); do #check for PIDs to write files
			javapid=$(tmux list-panes -t "mc$PORT" -F "#{pane_pid} #{session_name}" | awk '{print $1}')


			if [[ -n "$javapid" ]]; then
				break
			fi

			sleep 1
		done

		if [[ -n "$javapid" ]]; then
			echo "$SERVICE is now running."
			echo "$javapid" > $MCPATH/java.pid #save pid to files
			echo "mc$PORT" > $MCPATH/tmux.name
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_startmonitor() { #to be depricated
	if [ -z $CHECKSERVER ]; then
		echo "started monitor"
		/usr/bin/daemon --name=minecraft_checkserver -- $JAVA_HOME/bin/java -cp $CHECKSERVER CheckServer localhost $PORT
	fi
}

mc_saveoff() { #turning of server saving for backup after forcing save
	if is_running; then
		echo "$SERVICE is running... suspending saves"
		mc_exec "say SERVER BACKUP STARTING. Server going readonly..."
		mc_exec "save-off"
		mc_exec "save-all"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {	#restore auto saving
	if is_running; then
		echo "$SERVICE is running... re-enabling saves"
		mc_exec "save-on"
		mc_exec "say SERVER BACKUP ENDED. Server going read-write..."
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_kill() {	#hault the server
	pid=$(cat $MCPATH/java.pid)

	echo "terminating process with pid $pid"
	kill $pid

	for (( i=0; i < 10; i++ )); do
		is_running || break
		sleep 1
	done

	if is_running; then
		echo "$SERVICE could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "$SERVICE killed"
	else
		echo "$SERVICE terminated"
	fi
}

mc_stop() { #gracefully shutdown the server
	if is_running; then
		echo "$SERVICE is running... stopping."

		mc_exec "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."
		mc_exec "save-all"
		sleep 10
		mc_exec "stop"

		for (( i=0; i < 20; i++ )); do
			is_running || break
			sleep 1
		done
	else
		echo "$SERVICE was not running."
	fi

	if is_running; then
		echo "$SERVICE could not be shut down cleanly... still running."
		mc_kill
	else
		echo "$SERVICE is shut down."
	fi

	rm $MCSTORE/java.pid
	rm $MCPATH/java.pid
	rm $MCSTORE/tmux.name
	rm $MCPATH/tmux.name
}

mc_stopmonitor() { #to be depricated no used
	if [ -z $CHECKSERVER ]; then
		/usr/bin/daemon --name=minecraft_checkserver --stop
	fi
}

mc_backup() { #for running backups, using tar
	if is_running; then
		echo "Backing up minecraft world"
		[ -d "$BACKUPPATH/$BACKUPDIR" ] || mkdir -p "$BACKUPPATH"
		tar -cpzf "$BACKUPPATH/$BACKUPDIR" "$MCSTORE"
		tar -cpzf "$OFFBACKUPPATH/$BACKUPDIR" "$MCSTORE"
		find "$BACKUPPATH" -type f -mtime +3 -exec rm -rf {} \; #deletes backups older than 3 days but only in the main backup path
		echo "Backup complete"
	else
		echo "$SERVICE was not running. Not running backup."
	fi
}

mc_thinoutbackup() { # needs major work
	if (($(date +%H) == 0)) && (($(date +%M) < 15)); then
		archivedate=$(date --date="7 days ago")

		echo "Thinning backups created $archivedate out"

		archivedateunix=$(date --date="$archivedate" +%s)
		archivesourcedir=$BACKUPPATH/$(date --date="$archivedate" +%b_%Y)
		archivesource=$archivesourcedir/rdiff-backup-data/increments.$(date --date="$archivedate" +%Y-%m-%dT%H):0*.dir
		archivesource=$(echo $archivesource)
		archivedest=$BACKUPARCHIVEPATH/$(date --date="$archivedate" +%b_%Y)

		if [[ ! -f $archivesource ]]; then
			echo "Nothing to be done"
		else
			tempdir=$(mktemp -d)

			if [[ ! $tempdir =~ ^/tmp ]]; then
				echo "invalid tmp dir $tempdir"
			else
				rdiff-backup $archivesource $tempdir
				rdiff-backup --current-time $archivedateunix $tempdir $archivedest
				rm -R "$tempdir"

				rdiff-backup --remove-older-than 3D --force $archivesourcedir

				echo "done"
			fi
		fi
	fi
}

mc_exec() { #sendign commands to the MCserver
	if is_running; then
		tmux send-keys -t "$(cat $MCPATH/tmux.name)" "$@" ENTER
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

tmux_open() {
	if is_running; then
		tmux -2 attach-session -t $(cat $MCPATH/tmux.name) -d
	else
		echo "$SERVICE was not running. Not opening tmux session."
	fi
}

mc_dumpcrashlogs() { #save crash reports
	if is_running; then
		cp $MCPATH/crash-reports/* $CRASHLOG_DB_PATH
		mv $MCPATH/crash-reports/* $MCSTORE/crash-reports.archive/
	fi
}

mc_disksaverun() { #save the ramdisk to perminant drive
  if is_running; then
    echo "Saving ramdrive to disk."
    if [ ! -f $MCPATH/$SERVICE ]; then
      echo "Error.. Minecraft not in ram"
    else
      if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
        exit 1
      fi
      if [ -d $MCSTORE/$WORLD ]; then
        mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak
      fi

			mc_exec "say Writing to disk. Server going readonly..."
			mc_exec "save-off"
			mc_exec "save-all"
			cp -R $MCPATH/* $MCSTORE/
			mc_exec "save-on"

      if [ -d $MCSTORE/$WORLD.bak ]; then
        rm -r $MCSTORE/$WORLD.bak
      fi
    fi
  else
    echo "Service is not running"
 fi

}

mc_disksavehalt() { #save server on shutdown
   echo "Saving ramdrive to disk."
   if [ ! -f $MCPATH/$SERVICE ]; then
     echo "Error.. Minecraft not in ram"
   else
     if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
        exit 1
     fi
     if [ -d $MCSTORE/$WORLD ]; then
       mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak
     fi

     echo "Saving, tmux session closed"
     cp -R $MCPATH/* $MCSTORE/

     if [ -d $MCSTORE/$WORLD.bak ]; then
       rm -r $MCSTORE/$WORLD.bak
     fi
   fi
}


#Start-Stop here
case "$1" in
  start)
    if mc_start
    then
      mc_startmonitor
    fi
    ;;
  stop)
    mc_stopmonitor
    mc_stop
		mc_disksavehalt
    ;;
  restart)
    mc_stop
		mc_disksavehalt
    mc_start
    ;;
  backup)
		mc_disksaverun
    mc_saveoff
    mc_backup
    mc_saveon
    mc_thinoutbackup
    ;;
  exec)
    shift
    mc_exec "$@"
    ;;
	open)
		tmux_open
		;;
  dumpcrashlogs)
    mc_dumpcrashlogs
    ;;
	disksavehalt)
    mc_disksavehalt
    ;;
  disksaverun)
    mc_disksaverun
    ;;
  status)
    if is_running
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;

  *)
  echo "Usage: $(readlink -f $0) {start|stop|restart|backup|exec|dumpcrashlogs|disksavehalt|disksaverun|status}"
  exit 1
  ;;
esac

exit 0

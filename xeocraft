#!/bin/bash

DEFAULTSERVER="1" #the default server number if no number is given

#check if first argument is a number for the server
if [[ $1 =~ ^-?[0-9]+$ ]] ; then
	SERVERNUM="$1"
	shift 1
else
	SERVERNUM="$DEFAULTSERVER"
fi

USERNAME=$(whoami)

##############################
# Java and JVM configuration
##############################
#java path (RFE: auto detect) NOTE: adds /bin/java to call the java executable
JAVA_HOME="/usr/lib/jvm/java-8-server-jre/jre"

#Edit for Memory Allocation, recommended is "-Xmx6G -Xms6G" which is 6GB allocated
MEMORY_OPTS="-Xmx6G -Xms6G"

#Custom JVM options, the defaults I use are probably outdated
JAVA_OPTIONS="-d64 -server -XX:+UseG1GC -DJINTEGRA_NATIVE_MODE -DJINTEGRA_COINIT_VALUE=0 -Dsun.io.useCanonCaches=false -Djline.terminal=jline.UnsupportedTerminal -XX:ThreadPriorityPolicy=42 -XX:CompileThreshold=1500 -XX:+TieredCompilation -XX:ParallelGCThreads=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=15 -XX:+UnlockExperimentalVMOptions -XX:+UseAdaptiveGCBoundary -XX:+UseGCOverheadLimit -XX:+UseBiasedLocking -Xnoclassgc -Xverify:none -XX:UseSSE=4 -XX:+UseThreadPriorities -Djava.net.preferIPv4Stack=true -XX:+UseLargePages -XX:+OptimizeStringConcat -XX:+UseFastAccessorMethods -Xrs -XX:+UseCompressedOops -XX:+AggressiveOpts -Dfml.queryResult=confirm"

##############################
#Server filesystem configuration
##############################

#Server Jar that will be called to launch the server (either change to server jar name or rename server jar to this)
SERVICE='forge_latest.jar'

#storage location of main server files server files
MCSTORE="/home/$USERNAME/Documents/minecraft/xeocraft$SERVERNUM"
#ramdisk mount point where live server will be
MCPATH="/home/$USERNAME/Documents/minecraft/xeocraft$SERVERNUM""_ramdisk"
#Size of the ramdisk to be created in MegaBytes, should be larger than the max expected size of the server
DISKSIZE="6144"

#Directory for backups to be stored (this will hold backups for 3 days)
BACKUPPATH="/home/$USERNAME/Documents/minecraft/backups"
#Directory for archival of backups, recommended to use large external/offsite storage
OFFBACKUPPATH="/mnt/backups/xeocraft$SERVERNUM"
#naming scheme for backup files
BACKUPDIR="xeocraft""$SERVERNUM""_Backup_""$(date +%Y%m%d-%H:%M)"".tgz"

#Overwrite any variables from the config file if it exists
if [ -f "/home/$USERNAME/.config/xeocraft.config" ]; then
 source "/home/$USERNAME/.config/xeocraft.config"
fi

INVOCATION="${JAVA_HOME}/bin/java ${MEMORY_OPTS} ${JAVA_OPTIONS} -jar $SERVICE nogui" #jvm mc server compilation
PORT=$(grep server-port $MCSTORE/server.properties | cut -d '=' -f 2) #pull port from server.properties file
WORLD=$(grep level-name $MCSTORE/server.properties | cut -d '=' -f 2)	#pull world name from server.properties file

if [ -z "$PORT" ]; then #if no port set, sets to defaults
	PORT=$((25560+$SERVERNUM))
fi

if [ $(whoami) != $USERNAME ]; then
	su $USERNAME -l -c "$(readlink -f $0) $*"
	exit $?
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#			Server Operation Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mc_eula(){
	if [ ! -f "$MCSTORE/eula.txt" ]; then #check for eula
		echo "eula does not exist"
		echo "Do you agree to the minecraft server eula at https://account.mojang.com/documents/minecraft_eula?"
		read -p "by entering yes you are indicating your agreement to the minecraft EULA. (Yes/No) " response
		response=${response,,}    # tolower
		if ! [[ $response =~ (yes|y) ]]; then
			echo "User did not agree to eula, exiting..."
			exit 1
		fi
		echo "#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." > $MCSTORE/eula.txt
		echo "eula=true" >>$MCSTORE/eula.txt
	else
		cat "$MCSTORE/eula.txt" | grep -q "eula=true"
		if [[ "$?" -eq 1 ]]; then
			echo "Do you agree to the minecraft server eula at https://account.mojang.com/documents/minecraft_eula?"
			read -p "by entering yes you are indicating your agreement to the minecraft EULA. (Yes/No)" response
			response=${response,,}    # tolower
			if ! [[ $response =~ (yes|y) ]]; then
				echo "User did not agree to eula, exiting..."
				exit 1
			fi
			echo "#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." > $MCSTORE/eula.txt
			echo "eula=true" >> $MCSTORE/eula.txt
		fi
	fi
}

ramdsk_mount() { #mount ramdisk
	if mountpoint -q $MCPATH; then #check if ramdisk is already mounted
		echo "$SERVICE ramdisk is mounted"
	else
		echo "Need to mount $SERVICE ramdisk, requires root/su privledges to mount"
		sudo mount -t tmpfs none $MCPATH -o size="$DISKSIZE"M #mount ramdisk
		if mountpoint -q $MCPATH; then #check if mount succeded
			echo "$SERVICE ramdisk is mounted"
		else
			echo 1>&2 "$SERVICE ramdisk failed to mount, exiting." #exit if ramdisk failed to mount
			exit 2
		fi
	fi
}

is_running() { #check if the server is running
	if [ ! -e $MCPATH/java.pid ]; then
		return 1
	fi
	pid=$(cat $MCPATH/java.pid)
	if [ -z $pid ]; then
		return 1
	fi

	ps -eo "%p" | grep "^\\s*$pid\\s*\$" > /dev/null
	return $?
}

was_stopped() { #check if the server was stopped with the script
	if is_running; then
		return 0
	else
		if [ ! -e $MCPATH/java.pid ]; then
			return 0
		else
			return 1
		fi
	fi
}

mc_start() { #start the server
	if is_running; then
		echo "Tried to start but $SERVICE was already running!"
	else
		mc_eula
		echo "$SERVICE was not running... starting."
		ramdsk_mount
		cd $MCPATH #check if the server is in the ramdisk
		if [ ! -f "$MCPATH/$SERVICE" ]; then #move server to ramdisk if empty
      echo "Ram drive empty...  prepping."
      cp -R $MCSTORE/* $MCPATH/
    fi

		tmux new-session -s "mc$PORT" -d "$INVOCATION"

		for (( i=0; i < 10; i++ )); do #check for PIDs to write files
			javapid=$(tmux list-panes -t "mc$PORT" -F "#{pane_pid} #{session_name}" | awk '{print $1}')

			if [[ -n "$javapid" ]]; then
				break
			fi
			sleep 1
		done
		if [[ -n "$javapid" ]]; then
			echo "$SERVICE is now running."
			echo "$javapid" > $MCPATH/java.pid #save pid to files
			echo "mc$PORT" > $MCPATH/tmux.name
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_auto_restart(){
	if was_stopped; then
		exit 0
	else
		echo "$SERVICE was NOT running! Server/Java/Tmux session crashed, auto-starting"
		mc_start
	fi
}

mc_saveoff() { #turning of server saving for backup after forcing save
	if is_running; then
		echo "$SERVICE is running... suspending saves"
		mc_opsay " SERVER BACKUP STARTING. Server going readonly..."
		mc_exec "save-off"
		mc_exec "save-all"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {	#restore auto saving
	if is_running; then
		echo "$SERVICE is running... re-enabling saves"
		mc_exec "save-on"
		mc_opsay " SERVER BACKUP ENDED. Server going read-write..."
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_kill() {	#hault the server
	pid=$(cat $MCPATH/java.pid)
	echo "terminating process with pid $pid"
	kill $pid
	for (( i=0; i < 10; i++ )); do
		is_running || break
		sleep 1
	done
	if is_running; then
		echo "$SERVICE could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "$SERVICE killed"
	else
		echo "$SERVICE terminated"
	fi
}

mc_stop() { #gracefully shutdown the server
	if is_running; then
		echo "$SERVICE is running... stopping."
		mc_exec "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."
		mc_exec "save-all"
		sleep 10
		mc_exec "stop"
		for (( i=0; i < 20; i++ )); do
			is_running || break
			sleep 1
		done
	else
		echo "$SERVICE was not running."
	fi
	if is_running; then
		echo "$SERVICE could not be shut down cleanly... still running."
		mc_kill
	else
		echo "$SERVICE is shut down."
	fi
	rm $MCSTORE/java.pid
	rm $MCPATH/java.pid
	rm $MCSTORE/tmux.name
	rm $MCPATH/tmux.name
}

mc_backup() { #for running backups, using tar
	if is_running; then
		echo "Backing up minecraft world"
		[ -d "$BACKUPPATH" ] || mkdir -p "$BACKUPPATH" #checks for backup path
		tar -cpzf "$BACKUPPATH/$BACKUPDIR" "$MCSTORE"
		find "$BACKUPPATH" -type f -mtime +3 -exec rm -rf {} \; #deletes backups older than 3 days
		echo "Backup complete"
	else
		echo "$SERVICE was not running. Not running backup."
	fi
}

mc_restart(){
		if is_running; then
			echo "$SERVICE is running... restarting"
			mc_stop
			mc_disksavehalt
			mc_start
		else
			echo "$SERVICE is not running, will not restart."
		fi
}

mc_stop_delay(){ #10min timer for server shutdown
	if is_running; then
		echo "$SERVICE is running... restarting in 10 minutes. ctrl+C to cancel"
		mc_exec "say SERVER RESTARTING IN 10 MINUTES."
		sleep 5m
		echo "$SERVICE is restarting in 5 minutes. ctrl+C to cancel"
		mc_exec "say SERVER RESTARTING IN 5 MINUTES."
		sleep 4m
		echo "$SERVICE is restarting in 1 minute. ctrl+C to cancel"
		mc_exec "say SERVER RESTARTING IN 1 MINUTE."
		sleep 50
		mc_stop
		mc_disksavehalt
		mc_start
	fi
}


mc_archive(){
	echo "Archiving...."
	[ -d "$OFFBACKUPPATH" ] || mkdir -p "$OFFBACKUPPATH" #checks for backup path
	cp "$BACKUPPATH/$(ls -tr1 $BACKUPPATH/ | tail -n1)" "$OFFBACKUPPATH/"
	echo "Archived to $BACKUPPATH"
}

mc_bakarchive(){
	echo "Compressing archives"
	[ -d "$OFFBACKUPPATH/_Archive" ] || mkdir -p "$OFFBACKUPPATH/_Archive" #checks for backup path
	find $OFFBACKUPPATH -type f -maxdepth 1 | xargs tar --remove-files -cpzf "$OFFBACKUPPATH/_Archive/""$(date +%b%Y)"".tgz"
}

mc_exec() { #sending commands to the MCserver
	if is_running; then
		stuff=$(echo "$@" | awk  '{gsub(/\ /," ",$0);print $0}')
		tmux send-keys -t "$(cat $MCPATH/tmux.name)" "$stuff" ENTER
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

mc_opsay() { #whispers passed args to all OPs on the MCserver
	if is_running; then
		OPLIST=$(grep '"name"' "$MCPATH/ops.json" | cut -d '"' -f 4)
		for (( i = 1; i <= $(echo $OPLIST | wc -w) ; i++ )); do
			mc_exec "msg "$(echo $OPLIST | cut -d ' ' -f $i)" ""$@"
		done
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

tmux_open() {
	if is_running; then
		tmux -2 attach-session -t $(cat $MCPATH/tmux.name) -d
	else
		echo "$SERVICE was not running. Not opening tmux session."
	fi
}

mc_disksaverun() { #save the ramdisk to perminant drive
  if is_running; then
    echo "Saving ramdrive to disk."
    if [ ! -f $MCPATH/$SERVICE ]; then
      echo "Error.. Minecraft not in ram"
    else
      if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
        exit 1
      fi
      if [ -d $MCSTORE/$WORLD ]; then
        mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak
      fi

			mc_opsay "Writing to disk. Server going readonly..."
			mc_exec "save-off"
			mc_exec "save-all"
			cp -R $MCPATH/* $MCSTORE/
			mc_exec "save-on"

      if [ -d $MCSTORE/$WORLD.bak ]; then
        rm -r $MCSTORE/$WORLD.bak
      fi
    fi
  else
    echo "Service is not running"
 fi
}

mc_disksavehalt() { #save server on shutdown
   echo "Saving ramdrive to disk."
   if [ ! -f $MCPATH/$SERVICE ]; then
     echo "Error.. Minecraft not in ram"
   else
     if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check required!!!"
        exit 1
     fi
     if [ -d $MCSTORE/$WORLD ]; then
       mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak
     fi

     echo "Saving, tmux session closed"
     cp -R $MCPATH/* $MCSTORE/

     if [ -d $MCSTORE/$WORLD.bak ]; then
       rm -r $MCSTORE/$WORLD.bak
     fi
   fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
		mc_disksavehalt
    ;;
  restart)
		mc_restart
    ;;
  backup)
		mc_disksaverun
    mc_saveoff
    mc_backup
    mc_saveon
    ;;
	archive)
		mc_archive
		;;
	thinarchive)
		mc_bakarchive
		;;
  exec)
    shift
    mc_exec "$@"
    ;;
	opsay)
		shift
		mc_opsay "$@"
		;;
	open)
		tmux_open
		;;
	safestart)
		mc_auto_restart
		;;
	slowstop)
		mc_stop_delay
		;;
	disksavehalt)
    mc_disksavehalt
    ;;
  disksaverun)
    mc_disksaverun
    ;;
  status)
    if is_running
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;

  *)
  echo "Usage: $(readlink -f $0) [server number] {start|stop|restart|backup|archive|thinarchive|exec|opsay|slowrestart|safestart|disksavehalt|disksaverun|status}"
  exit 1
  ;;
esac

exit 0


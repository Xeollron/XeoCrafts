#!/bin/bash

DEFAULTSERVER="1" #the default server number if no number is given

#check if first argument is a number for the server
if [[ $1 =~ ^-?[0-9]+$ ]] ; then
	SERVERNUM="$1"
	shift 1
else
	SERVERNUM="$DEFAULTSERVER"
fi

# Settings start
USERNAME=$(whoami)

SERVICE='forge_latest.jar'																				#either change to server jar name or rename server jar to this
MCPATH="/home/$USERNAME/Documents/minecraft/xeocraft$SERVERNUM" 					#storage location of server files
BACKUPPATH="/home/$USERNAME/Documents/minecraft/backups"					#directory for backups to be stored
CRASHLOG_DB_PATH="/home/$USERNAME/Documents/minecraft/crashlogs"	#crashlog path
JAVA_HOME="/usr/lib/jvm/java-8-server-jre"												#java path (update to try to auto detect)

WRPATH="/home/$USERNAME/Documents/minecraft"																													#WarmRoast jar path (only necissary for server performance debugging)

MEMORY_OPTS="-Xmx4G -Xms4G" #Edit for Memory Allocation
# Java JVM options/config, not sure how required
JAVA_OPTIONS="-d64 -server -DJINTEGRA_NATIVE_MODE -DJINTEGRA_COINIT_VALUE=0 -Dsun.io.useCanonCaches=false -Djline.terminal=jline.UnsupportedTerminal -XX:ThreadPriorityPolicy=42 -XX:CompileThreshold=1500 -XX:+TieredCompilation -XX:ParallelGCThreads=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=15 -XX:+UnlockExperimentalVMOptions -XX:+UseAdaptiveGCBoundary -XX:+UseGCOverheadLimit -XX:+UseBiasedLocking -Xnoclassgc -Xverify:none -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:-UseAdaptiveSizePolicy -XX:+UseThreadPriorities -Djava.net.preferIPv4Stack=true -XX:+UseLargePages -XX:+OptimizeStringConcat -XX:+UseFastAccessorMethods -Xrs -XX:+UseCompressedOops -XX:+AggressiveOpts -Dfml.queryResult=confirm"

INVOCATION="${JAVA_HOME}/jre/bin/java ${MEMORY_OPTS} ${JAVA_OPTIONS} -jar $SERVICE nogui" #jvm mc server compilation
BACKUPARCHIVEPATH=$BACKUPPATH/archive
BACKUPDIR="$PORT:$(date).tar.gz"	#naming scheme for backup files
PORT=$(grep server-port $MCPATH/server.properties | cut -d '=' -f 2) #pull port from server.properties file
WORLD=$(grep level-name $MCPATH/server.properties | cut -d '=' -f 2)	#pull world name from server.properties file

#need to figure out something to remind for users

if [ -z "$PORT" ]; then #if no port set, sets to defaults
	PORT=$((25564+$SERVERNUM))
fi

# End of Settings

if [ $(whoami) != $USERNAME ]; then
	su $USERNAME -l -c "$(readlink -f $0) $*"
	exit $?
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#			Server Operation Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mc_eula(){
	if [ ! -f "$MCPATH/eula.txt" ]; then #check for eula
		echo "eula does not exist"
		echo "Do you agree to the minecraft server eula at https://account.mojang.com/documents/minecraft_eula?"
		read -p "by entering yes you are indicating your agreement to the minecraft EULA. (Yes/No) " response
		response=${response,,}    # tolower
		if ! [[ $response =~ (yes|y) ]]; then
			echo "User did not agree to eula, exiting..."
			exit 1
		fi
		echo "#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." > $MCPATH/eula.txt
		echo "eula=true" >>$MCPATH/eula.txt
	else
		cat "$MCPATH/eula.txt" | grep -q "eula=true"
		if [[ "$?" -eq 1 ]]; then
			echo "Do you agree to the minecraft server eula at https://account.mojang.com/documents/minecraft_eula?"
			read -p "by entering yes you are indicating your agreement to the minecraft EULA. (Yes/No)" response
			response=${response,,}    # tolower
			if ! [[ $response =~ (yes|y) ]]; then
				echo "User did not agree to eula, exiting..."
				exit 1
			fi
			echo "#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." > $MCPATH/eula.txt
			echo "eula=true" >> $MCPATH/eula.txt
		fi
	fi
}

is_running() { #check if the server is running
	if [ ! -e $MCPATH/java.pid ]; then
		return 1
	fi
	pid=$(cat $MCPATH/java.pid)
	if [ -z $pid ]; then
		return 1
	fi

	ps -eo "%p" | grep "^\\s*$pid\\s*\$" > /dev/null
	return $?
}

mc_start() { #start the server
	if is_running; then
		echo "Tried to start but $SERVICE was already running!"
	else
		mc_eula
		echo "$SERVICE was not running... starting."
		cd $MCPATH

		tmux new-session -s "mc$PORT" -d "$INVOCATION"

		for (( i=0; i < 10; i++ )); do #check for PIDs to write files
			javapid=$(tmux list-panes -t "mc$PORT" -F "#{pane_pid} #{session_name}" | awk '{print $1}')

			if [[ -n "$javapid" ]]; then
				break
			fi
			sleep 1
		done
		if [[ -n "$javapid" ]]; then
			echo "$SERVICE is now running."
			echo "$javapid" > $MCPATH/java.pid #save pid to files
			echo "mc$PORT" > $MCPATH/tmux.name
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_saveoff() { #turning of server saving for backup after forcing save
	if is_running; then
		echo "$SERVICE is running... suspending saves"
		mc_exec "say SERVER BACKUP STARTING. Server going readonly..."
		mc_exec "save-off"
		mc_exec "save-all"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {	#restore auto saving
	if is_running; then
		echo "$SERVICE is running... re-enabling saves"
		mc_exec "save-on"
		mc_exec "say SERVER BACKUP ENDED. Server going read-write..."
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_kill() {	#hault the server
	pid=$(cat $MCPATH/java.pid)
	echo "terminating process with pid $pid"
	kill $pid
	for (( i=0; i < 10; i++ )); do
		is_running || break
		sleep 1
	done
	if is_running; then
		echo "$SERVICE could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "$SERVICE killed"
	else
		echo "$SERVICE terminated"
	fi
}

mc_stop() { #gracefully shutdown the server
	if is_running; then
		echo "$SERVICE is running... stopping."
		mc_exec "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."
		mc_exec "save-all"
		sleep 10
		mc_exec "stop"
		for (( i=0; i < 20; i++ )); do
			is_running || break
			sleep 1
		done
	else
		echo "$SERVICE was not running."
	fi
	if is_running; then
		echo "$SERVICE could not be shut down cleanly... still running."
		mc_kill
	else
		echo "$SERVICE is shut down."
	fi
	rm $MCPATH/java.pid
	rm $MCPATH/tmux.name
}

mc_backup() { #for running backups, using tar
	if is_running; then
		echo "Backing up minecraft world"
		[ -d "$BACKUPPATH/$BACKUPDIR" ] || mkdir -p "$BACKUPPATH"
		tar -cpzf "$BACKUPPATH/$BACKUPDIR" "$MCPATH"
		tar -cpzf "$OFFBACKUPPATH/$BACKUPDIR" "$MCPATH"
		find "$BACKUPPATH" -type f -mtime +3 -exec rm -rf {} \; #deletes backups older than 3 days but only in the main backup path
		echo "Backup complete"
	else
		echo "$SERVICE was not running. Not running backup."
	fi
}

mc_thinoutbackup() { # needs major work
	if (($(date +%H) == 0)) && (($(date +%M) < 15)); then
		archivedate=$(date --date="7 days ago")

		echo "Thinning backups created $archivedate out"

		archivedateunix=$(date --date="$archivedate" +%s)
		archivesourcedir=$BACKUPPATH/$(date --date="$archivedate" +%b_%Y)
		archivesource=$archivesourcedir/rdiff-backup-data/increments.$(date --date="$archivedate" +%Y-%m-%dT%H):0*.dir
		archivesource=$(echo $archivesource)
		archivedest=$BACKUPARCHIVEPATH/$(date --date="$archivedate" +%b_%Y)

		if [[ ! -f $archivesource ]]; then
			echo "Nothing to be done"
		else
			tempdir=$(mktemp -d)

			if [[ ! $tempdir =~ ^/tmp ]]; then
				echo "invalid tmp dir $tempdir"
			else
				rdiff-backup $archivesource $tempdir
				rdiff-backup --current-time $archivedateunix $tempdir $archivedest
				rm -R "$tempdir"

				rdiff-backup --remove-older-than 3D --force $archivesourcedir

				echo "done"
			fi
		fi
	fi
}

mc_exec() { #sendign commands to the MCserver
	if is_running; then
		stuff=$(echo "$@" | awk  '{gsub(/\ /," ",$0);print $0}')
		tmux send-keys -t "$(cat $MCPATH/tmux.name)" "$stuff" ENTER
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

tmux_open() {
	if is_running; then
		tmux -2 attach-session -t $(cat $MCPATH/tmux.name) -d
	else
		echo "$SERVICE was not running. Not opening tmux session."
	fi
}

mc_dumpcrashlogs() { #save crash reports
	if is_running; then
		cp $MCPATH/crash-reports/* $CRASHLOG_DB_PATH
		mv $MCPATH/crash-reports/* $MCPATH/crash-reports.archive/
	fi
}

server_perf_running() { #check if the server is running
	if [ ! -e $MCPATH/warmroast.pid ]; then
		return 1
	fi
	pid=$(cat $MCPATH/warmroast.pid)
	if [ -z $pid ]; then
		return 1
	fi

	ps -eo "%p" | grep "^\\s*$pid\\s*\$" > /dev/null
	return $?
}


server_perf_start(){
	if is_running; then
		tmux new-session -s "wr$PORT" -d "java -Djava.library.path=${JAVA_HOME}/jre/bin -cp ${JAVA_HOME}/lib/tools.jar:$WRPATH/warmroast-1.0.0-SNAPSHOT.jar com.sk89q.warmroast.WarmRoast --pid $(cat $MCPATH/java.pid) --thread 'Server thread' --timeout 60"

		for (( i=0; i < 10; i++ )); do #check for PIDs to write files
			warmroastpid=$(tmux list-panes -t "wr$PORT" -F "#{pane_pid} #{session_name}" | awk '{print $1}')

			if [[ -n "$warmroastpid" ]]; then
				break
			fi
			sleep 1
		done
		if [[ -n "$warmroastpid" ]]; then
			echo "warm roast is now running."
			echo "open http://hostname:23000 to veiw info"
			echo "$warmroastpid" > $MCPATH/warmroast.pid #save pid to file
		else
			echo "Could not start warmroastpid."
		fi
	else
		echo "$SERVICE was not running. Not starting debug session."
	fi
}

server_perf_end() {	#hault the debug service
	pid=$(cat $MCPATH/warmroast.pid)
	echo "terminating process with pid $pid"
	kill $pid
	for (( i=0; i < 10; i++ )); do
		server_perf_running || break
		sleep 1
	done
	if server_perf_running; then
		echo "warm roast could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "warm roast killed"
	else
		echo "warm roast terminated"
	fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  backup)
    mc_saveoff
    mc_backup
    mc_saveon
    mc_thinoutbackup
    ;;
  exec)
    shift
    mc_exec "$@"
    ;;
	open)
		tmux_open
		;;
	debugon)
		server_perf_start
		;;
	debugoff)
		server_perf_end
		;;
  dumpcrashlogs)
    mc_dumpcrashlogs
    ;;
  status)
    if is_running
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;

  *)
  echo "Usage: $(readlink -f $0) [server number] {start|stop|restart|backup|exec|dumpcrashlogs|disksavehalt|disksaverun|status|open|debugon|debugoff}"
  exit 1
  ;;
esac

exit 0
